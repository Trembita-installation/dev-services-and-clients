  'use strict';

  const fs = require('fs');// Імпортуємо модуль для роботи з файловою системою
  const path = require('path');// Імпортуємо модуль для роботи з шляхами
  const Sequelize = require('sequelize'); // Імпортуємо основний модуль Sequelize для роботи з базою даних
  const process = require('process'); // Імпортуємо модуль для доступу до інформації про процес додатку
  const basename = path.basename(__filename);// Отримуємо назву поточного файлу
  const env = process.env.NODE_ENV || 'development';// Встановлюємо середовище додатку (за замовчуванням 'development')
  const config = require(__dirname + '/../config/config.js')[env];// Завантажуємо конфігурацію для підключення до бази даних в залежності від середовища
  const db = {};// Створюємо об'єкт для зберігання моделей

  let sequelize;
  if (config.use_env_variable) {
    // Створюємо новий екземпляр Sequelize, використовуючи змінну середовища
    sequelize = new Sequelize(process.env[config.use_env_variable], config);
    // Створюємо новий екземпляр Sequelize, використовуючи параметри з конфігурації
  } else {
    sequelize = new Sequelize(config.database, config.username, config.password, config);
  }

  fs
    .readdirSync(__dirname)// Читаємо список файлів в поточній директорії
    .filter(file => {
         // Фільтруємо файли:
      return (
        file.indexOf('.') !== 0 &&// Виключаємо файли, що починаються з точки
        file !== basename &&// Виключаємо поточний файл
        file.slice(-3) === '.js' &&// Виключаємо файли не з розширенням .js
        file.indexOf('.test.js') === -1 // Виключаємо файли з розширенням .test.js
      );
    })
    .forEach(file => {
       // Для кожного відфільтрованого файлу:
      const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);// Імпортуємо модель з файлу
      db[model.name] = model; // Додаємо модель до об'єкту db
    });

  Object.keys(db).forEach(modelName => {
     // Для кожної моделі:
    if (db[modelName].associate) {
         // Якщо модель має метод associate:
      db[modelName].associate(db);// Викликаємо метод associate для встановлення зв'язків між моделями
    }
  });

  db.sequelize = sequelize;// Додаємо екземпляр sequelize до об'єкту db
  db.Sequelize = Sequelize;// Додаємо модуль Sequelize до об'єкту db

  module.exports = db;// Експортуємо об'єкт db

/*
Цей код - це модуль Node.js для роботи з базою даних за допомогою Sequelize, ORM для зручної роботи з реляційними базами даних в Node.js.

Як це працює:

1. Імпорт модулів:
  - fs (File System) використовується для роботи з файловою системою.
  - path використовується для роботи з шляхами до файлів і директорій.
  - Sequelize - основний модуль Sequelize для роботи з базою даних.
  - process для доступу до інформації про процес додатку.

2. Встановлення змінних середовища і конфігурації:
  - basename - назва поточного файлу.
  - env - середовище додатку, яке може бути "development", "production", або іншим, визначеним у змінній середовища NODE_ENV.
  - config - завантажує конфігурацію для підключення до бази даних з відповідного файлу в залежності від середовища.

3. Створення з'єднання з базою даних:
  - Визначається змінна sequelize, яка створює новий екземпляр Sequelize, використовуючи параметри з конфігурації.

4. Читання файлів моделей і їх завантаження:
  - fs.readdirSync(__dirname) зчитує список файлів в поточній директорії.
  - .filter() використовується для фільтрації файлів: виключаються файли, що починаються з точки, поточний файл (basename), файли не з розширенням .js і файли з розширенням .test.js.
  - .forEach() завантажує кожну модель з файлів, використовуючи шлях до файлу і передаючи їй об'єкт sequelize і Sequelize.DataTypes.

5. Ассоціювання моделей:
  - Викликається метод associate для кожної моделі, якщо він існує, для встановлення зв'язків між моделями.

6. Експорт об'єкту бази даних (db):
  - Повертається об'єкт db, який містить всі завантажені моделі, об'єкт sequelize для роботи з базою даних і об'єкт Sequelize для доступу до класів Sequelize.

Цей код дозволяє організувати роботу з базою даних в Node.js додатку, роблячи управління моделями і з'єднанням з базою даних більш зручним і структурованим.
*/

